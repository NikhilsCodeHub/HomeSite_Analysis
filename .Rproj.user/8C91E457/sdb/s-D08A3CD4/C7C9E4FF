{
    "contents" : "\n###  Load Packages\n\nlibrary(randomForest)\nlibrary(caret)\nlibrary(dplyr)\n\n\n\ndtrain <- read.csv(\"train.csv\", stringsAsFactors = TRUE, na.strings = c(\"\",\" \", \"NaN\", \"NA\", \"Inf\"))\ndim(dtrain)\n## 260753    299\n\n## Field, CoverageField, SalesField, PersonalField, \n## PropertyField, GeographicField\n## \n\n## Identify columns having NA values\nna.cols <- sapply(dtrain[,1:dim(dtrain)[2]],anyNA)\n\nna.cols <- data.frame(ColNames=rownames(data.frame(na.cols)),ColNA = na.cols)\n\nna.cols[na.cols$ColNA,\"ColNames\"]\n\n#                            ColNames ColNA\n# PersonalField7       PersonalField7  TRUE\n# PersonalField84     PersonalField84  TRUE\n# PropertyField3       PropertyField3  TRUE\n# PropertyField4       PropertyField4  TRUE\n# PropertyField29     PropertyField29  TRUE\n# PropertyField32     PropertyField32  TRUE\n# PropertyField34     PropertyField34  TRUE\n# PropertyField36     PropertyField36  TRUE\n# PropertyField38     PropertyField38  TRUE\n# GeographicField63 GeographicField63  TRUE\n\nlevels(dtrain$PersonalField7) <- c(\"N\", \"Y\", \"0\")\ndtrain$PersonalField7[is.na(dtrain$PersonalField7)]<-\"0\"\n\ndtrain$PersonalField84 <- factor(dtrain$PersonalField84)\nc<-levels(dtrain$PersonalField84)\nc[length(c)+1] <- \"0\"\nlevels(dtrain$PersonalField84) <-  c\ndtrain$PersonalField84[is.na(dtrain$PersonalField84)]<-\"0\"\n\n\nlevels(dtrain$PropertyField36) <- c(\"N\", \"Y\", \"0\")\ndtrain$PropertyField36[is.na(dtrain$PropertyField36)]<-\"0\"\n\n## Identify each column as factor or continuous variable\n\n## If Factor then identify if NA values should be factor 0\n##  OR be imputed based on other factors.\n##\n## If columns have more than 50 factors then\n##  identify ways to split the data and create new columns and refactor.\n##    Eg : XG, XA, YB, YD   split values to :>  X | G, X | A, Y | B  so on..\n##\n## unfactor any columns with nlevels > 15\n\n\n##  Methods to approach this running models\n##\n##  1. Groupd Similar columns together and run PCH.\n##    a. Run RandomForest on the combo\n##    b. Run GLM on the compbo\n##  2. Run GLM on the entire Dataset\n##  3. Run RandomForest on the entire Dataset\n##\n\ntable(dtrain$GeographicField63, useNA = \"ifany\")\n\n\n\n\nntrain <- tbl_df(dtrain)\nntrain <- select(ntrain, -PersonalField84, -PropertyField29, -Original_Quote_Date, -PersonalField7, -GeographicField63)\n\n## unfactor those columns as they have more than 50 factors\nntrain$PersonalField16 <- as.character(ntrain$PersonalField16)\nntrain$PersonalField17 <- as.character(ntrain$PersonalField17)\nntrain$PersonalField18 <- as.character(ntrain$PersonalField18)\nntrain$PersonalField19 <- as.character(ntrain$PersonalField19)\nntrain$PropertyField7 <- as.character(ntrain$PropertyField7)\nntrain$QuoteConversion_Flag <- factor(ntrain$QuoteConversion_Flag)\n\n# ntrain$GeographicField63 <- as.character(ntrain$GeographicField63)\n# ntrain$GeographicField63[is.na(ntrain$GeographicField63)] <- \"\"\n# ntrain$GeographicField63 <- factor(ntrain$GeographicField63)\n\n\n## Starting with RandomForest\nset.seed(2016)\n\nglm_fit <- glm(QuoteConversion_Flag~., data=ntrain, family=binomial(\"logit\"))\n\n\n\n\n\n## Load Test Data\n\ndtest <- read.csv(\"test.csv\", stringsAsFactors = FALSE)\n\n\n## Clean Test Data\n\ndtest <- select(dtest, -PersonalField84, -PropertyField29, -Original_Quote_Date, -PersonalField7, -GeographicField63)\n\ndtest$PersonalField16 <- as.character(dtest$PersonalField16)\ndtest$PersonalField17 <- as.character(dtest$PersonalField17)\ndtest$PersonalField18 <- as.character(dtest$PersonalField18)\ndtest$PersonalField19 <- as.character(dtest$PersonalField19)\ndtest$PropertyField7 <- as.character(dtest$PropertyField7)\ndtest$QuoteConversion_Flag <- factor(dtest$QuoteConversion_Flag)\n\n\n## Predct Test Data\n\nset.seed(2016)\npred_rf <- predict(glm_fit, dtest)\n\n\n# Create a data frame with two columns: PassengerId & Survived. Survived contains your predictions\nmy_solution <- data.frame(QuoteNumber = dtest$QuoteNumber, QuoteConversion_Flag = pred_rf)\n\n# Write your solution away to a csv file with the name my_solution.csv\nwrite.csv(my_solution, file=paste0(\"Titanic_Submission_\", format(Sys.time(), \"%m%d%Y%H%M\"),\".csv\") , row.names=FALSE)\n\n\n\n\n",
    "created" : 1452878579386.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3913361232",
    "id" : "C7C9E4FF",
    "lastKnownWriteTime" : 1452878590,
    "path" : "~/GitHub/HomeSite_Analysis/Analysis.R",
    "project_path" : "Analysis.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}